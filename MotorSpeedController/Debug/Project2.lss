
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000023f0  00002484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800080  00800080  000024a4  2**0
                  ALLOC
  3 .stab         00001a10  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d27  00000000  00000000  00003eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000093d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 36 11 	jmp	0x226c	; 0x226c <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 10 	call	0x2058	; 0x2058 <main>
      8a:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 11 	jmp	0x232c	; 0x232c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 96 11 	jmp	0x232c	; 0x232c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e7       	ldi	r22, 0x77	; 119
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_14>:
#include "ADC.h"

volatile uint32 adc = 0;

ISR(ADC_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	adc = ADC;
     cbc:	e4 e2       	ldi	r30, 0x24	; 36
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	cc 01       	movw	r24, r24
     cc6:	a0 e0       	ldi	r26, 0x00	; 0
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	80 93 80 00 	sts	0x0080, r24
     cce:	90 93 81 00 	sts	0x0081, r25
     cd2:	a0 93 82 00 	sts	0x0082, r26
     cd6:	b0 93 83 00 	sts	0x0083, r27
}
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	0f 90       	pop	r0
     cf0:	1f 90       	pop	r1
     cf2:	18 95       	reti

00000cf4 <ADC_init>:

void ADC_init(void)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0;
     cfc:	e7 e2       	ldi	r30, 0x27	; 39
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	10 82       	st	Z, r1
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0) | (1<<ADIE);
     d02:	e6 e2       	ldi	r30, 0x26	; 38
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	8b e8       	ldi	r24, 0x8B	; 139
     d08:	80 83       	st	Z, r24
}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <ADC_read_channel>:

void ADC_read_channel(uint8 ch_num)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);
     d1c:	af e5       	ldi	r26, 0x5F	; 95
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ef e5       	ldi	r30, 0x5F	; 95
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	8c 93       	st	X, r24
	ch_num &= 0x07; // clear last five bits
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	87 70       	andi	r24, 0x07	; 7
     d2e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; //clear first five bits
     d30:	a7 e2       	ldi	r26, 0x27	; 39
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e7 e2       	ldi	r30, 0x27	; 39
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 7e       	andi	r24, 0xE0	; 224
     d3c:	8c 93       	st	X, r24
	ADMUX =  ADMUX | ch_num;
     d3e:	a7 e2       	ldi	r26, 0x27	; 39
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e7 e2       	ldi	r30, 0x27	; 39
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	90 81       	ld	r25, Z
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	89 2b       	or	r24, r25
     d4c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	80 64       	ori	r24, 0x40	; 64
     d5a:	8c 93       	st	X, r24
}
     d5c:	0f 90       	pop	r0
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <LCD_init>:
 *******************************************************************************/

#include"LCD.h"

void LCD_init()
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_DIR = (1<<Rs) | (1<<RW) | (1<<E);
     d6c:	e1 e3       	ldi	r30, 0x31	; 49
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	87 e0       	ldi	r24, 0x07	; 7
     d72:	80 83       	st	Z, r24
	LCD_DATA_DIR = 0x0F;
#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
	LCD_sendCommand(TWO_LINE_LCD_FOUR_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_DIR = 0xFF;
     d74:	e4 e3       	ldi	r30, 0x34	; 52
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	80 83       	st	Z, r24
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* 2 lines + 8bit mode */
     d7c:	88 e3       	ldi	r24, 0x38	; 56
     d7e:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCD_sendCommand>
#endif
	LCD_sendCommand(CURSOR_OFF); /* Cursor_OFF */
     d82:	8c e0       	ldi	r24, 0x0C	; 12
     d84:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear screen */
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCD_sendCommand>
}
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	c9 57       	subi	r28, 0x79	; 121
     da2:	d0 40       	sbci	r29, 0x00	; 0
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	fe 01       	movw	r30, r28
     db0:	e7 58       	subi	r30, 0x87	; 135
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,Rs);
     db6:	a2 e3       	ldi	r26, 0x32	; 50
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e2 e3       	ldi	r30, 0x32	; 50
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8e 7f       	andi	r24, 0xFE	; 254
     dc2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
     dc4:	a2 e3       	ldi	r26, 0x32	; 50
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e2 e3       	ldi	r30, 0x32	; 50
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8d 7f       	andi	r24, 0xFD	; 253
     dd0:	8c 93       	st	X, r24
     dd2:	fe 01       	movw	r30, r28
     dd4:	eb 58       	subi	r30, 0x8B	; 139
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a0 e8       	ldi	r26, 0x80	; 128
     dde:	bf e3       	ldi	r27, 0x3F	; 63
     de0:	80 83       	st	Z, r24
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	a2 83       	std	Z+2, r26	; 0x02
     de6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     de8:	8e 01       	movw	r16, r28
     dea:	0f 58       	subi	r16, 0x8F	; 143
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	fe 01       	movw	r30, r28
     df0:	eb 58       	subi	r30, 0x8B	; 139
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	2b ea       	ldi	r18, 0xAB	; 171
     dfe:	3a ea       	ldi	r19, 0xAA	; 170
     e00:	4a ea       	ldi	r20, 0xAA	; 170
     e02:	5e e3       	ldi	r21, 0x3E	; 62
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	f8 01       	movw	r30, r16
     e0e:	80 83       	st	Z, r24
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	a2 83       	std	Z+2, r26	; 0x02
     e14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e16:	fe 01       	movw	r30, r28
     e18:	ef 58       	subi	r30, 0x8F	; 143
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	60 81       	ld	r22, Z
     e1e:	71 81       	ldd	r23, Z+1	; 0x01
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	34 f4       	brge	.+12     	; 0xe40 <LCD_sendCommand+0xac>
		__ticks = 1;
     e34:	fe 01       	movw	r30, r28
     e36:	e0 59       	subi	r30, 0x90	; 144
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	80 83       	st	Z, r24
     e3e:	e0 c0       	rjmp	.+448    	; 0x1000 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
     e40:	fe 01       	movw	r30, r28
     e42:	ef 58       	subi	r30, 0x8F	; 143
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	60 81       	ld	r22, Z
     e48:	71 81       	ldd	r23, Z+1	; 0x01
     e4a:	82 81       	ldd	r24, Z+2	; 0x02
     e4c:	93 81       	ldd	r25, Z+3	; 0x03
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4f e7       	ldi	r20, 0x7F	; 127
     e54:	53 e4       	ldi	r21, 0x43	; 67
     e56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e5a:	18 16       	cp	r1, r24
     e5c:	0c f0       	brlt	.+2      	; 0xe60 <LCD_sendCommand+0xcc>
     e5e:	c0 c0       	rjmp	.+384    	; 0xfe0 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
     e60:	fe 01       	movw	r30, r28
     e62:	eb 58       	subi	r30, 0x8B	; 139
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	60 81       	ld	r22, Z
     e68:	71 81       	ldd	r23, Z+1	; 0x01
     e6a:	82 81       	ldd	r24, Z+2	; 0x02
     e6c:	93 81       	ldd	r25, Z+3	; 0x03
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4a e7       	ldi	r20, 0x7A	; 122
     e74:	54 e4       	ldi	r21, 0x44	; 68
     e76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	fe 01       	movw	r30, r28
     e80:	e4 59       	subi	r30, 0x94	; 148
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8c:	8e 01       	movw	r16, r28
     e8e:	08 59       	subi	r16, 0x98	; 152
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	fe 01       	movw	r30, r28
     e94:	e4 59       	subi	r30, 0x94	; 148
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4a e7       	ldi	r20, 0x7A	; 122
     ea6:	53 e4       	ldi	r21, 0x43	; 67
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 83       	st	Z, r24
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	a2 83       	std	Z+2, r26	; 0x02
     eb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eba:	fe 01       	movw	r30, r28
     ebc:	e8 59       	subi	r30, 0x98	; 152
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	44 f4       	brge	.+16     	; 0xee8 <LCD_sendCommand+0x154>
		__ticks = 1;
     ed8:	fe 01       	movw	r30, r28
     eda:	ea 59       	subi	r30, 0x9A	; 154
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	64 c0       	rjmp	.+200    	; 0xfb0 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
     ee8:	fe 01       	movw	r30, r28
     eea:	e8 59       	subi	r30, 0x98	; 152
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	0c f0       	brlt	.+2      	; 0xf08 <LCD_sendCommand+0x174>
     f06:	43 c0       	rjmp	.+134    	; 0xf8e <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f08:	fe 01       	movw	r30, r28
     f0a:	e4 59       	subi	r30, 0x94	; 148
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	8e 01       	movw	r16, r28
     f28:	0a 59       	subi	r16, 0x9A	; 154
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	f8 01       	movw	r30, r16
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
     f3e:	1f c0       	rjmp	.+62     	; 0xf7e <LCD_sendCommand+0x1ea>
     f40:	fe 01       	movw	r30, r28
     f42:	ec 59       	subi	r30, 0x9C	; 156
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	89 e1       	ldi	r24, 0x19	; 25
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f4e:	fe 01       	movw	r30, r28
     f50:	ec 59       	subi	r30, 0x9C	; 156
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <LCD_sendCommand+0x1c4>
     f5c:	fe 01       	movw	r30, r28
     f5e:	ec 59       	subi	r30, 0x9C	; 156
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	de 01       	movw	r26, r28
     f68:	aa 59       	subi	r26, 0x9A	; 154
     f6a:	bf 4f       	sbci	r27, 0xFF	; 255
     f6c:	fe 01       	movw	r30, r28
     f6e:	ea 59       	subi	r30, 0x9A	; 154
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	9c 93       	st	X, r25
     f7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7e:	fe 01       	movw	r30, r28
     f80:	ea 59       	subi	r30, 0x9A	; 154
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	d1 f6       	brne	.-76     	; 0xf40 <LCD_sendCommand+0x1ac>
     f8c:	4b c0       	rjmp	.+150    	; 0x1024 <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	8e 01       	movw	r16, r28
     f90:	0a 59       	subi	r16, 0x9A	; 154
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	fe 01       	movw	r30, r28
     f96:	e8 59       	subi	r30, 0x98	; 152
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	60 81       	ld	r22, Z
     f9c:	71 81       	ldd	r23, Z+1	; 0x01
     f9e:	82 81       	ldd	r24, Z+2	; 0x02
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	f8 01       	movw	r30, r16
     fac:	91 83       	std	Z+1, r25	; 0x01
     fae:	80 83       	st	Z, r24
     fb0:	de 01       	movw	r26, r28
     fb2:	ae 59       	subi	r26, 0x9E	; 158
     fb4:	bf 4f       	sbci	r27, 0xFF	; 255
     fb6:	fe 01       	movw	r30, r28
     fb8:	ea 59       	subi	r30, 0x9A	; 154
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	91 81       	ldd	r25, Z+1	; 0x01
     fc0:	11 96       	adiw	r26, 0x01	; 1
     fc2:	9c 93       	st	X, r25
     fc4:	8e 93       	st	-X, r24
     fc6:	fe 01       	movw	r30, r28
     fc8:	ee 59       	subi	r30, 0x9E	; 158
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 81       	ld	r24, Z
     fce:	91 81       	ldd	r25, Z+1	; 0x01
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <LCD_sendCommand+0x23c>
     fd4:	fe 01       	movw	r30, r28
     fd6:	ee 59       	subi	r30, 0x9E	; 158
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	80 83       	st	Z, r24
     fde:	22 c0       	rjmp	.+68     	; 0x1024 <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fe0:	8e 01       	movw	r16, r28
     fe2:	00 59       	subi	r16, 0x90	; 144
     fe4:	1f 4f       	sbci	r17, 0xFF	; 255
     fe6:	fe 01       	movw	r30, r28
     fe8:	ef 58       	subi	r30, 0x8F	; 143
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	f8 01       	movw	r30, r16
     ffe:	80 83       	st	Z, r24
    1000:	de 01       	movw	r26, r28
    1002:	af 59       	subi	r26, 0x9F	; 159
    1004:	bf 4f       	sbci	r27, 0xFF	; 255
    1006:	fe 01       	movw	r30, r28
    1008:	e0 59       	subi	r30, 0x90	; 144
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1010:	fe 01       	movw	r30, r28
    1012:	ef 59       	subi	r30, 0x9F	; 159
    1014:	ff 4f       	sbci	r31, 0xFF	; 255
    1016:	80 81       	ld	r24, Z
    1018:	8a 95       	dec	r24
    101a:	f1 f7       	brne	.-4      	; 0x1018 <LCD_sendCommand+0x284>
    101c:	fe 01       	movw	r30, r28
    101e:	ef 59       	subi	r30, 0x9F	; 159
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	80 83       	st	Z, r24
	_delay_us(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	84 60       	ori	r24, 0x04	; 4
    1030:	8c 93       	st	X, r24
    1032:	fe 01       	movw	r30, r28
    1034:	e3 5a       	subi	r30, 0xA3	; 163
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e8       	ldi	r26, 0x80	; 128
    103e:	bf e3       	ldi	r27, 0x3F	; 63
    1040:	80 83       	st	Z, r24
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	a2 83       	std	Z+2, r26	; 0x02
    1046:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1048:	8e 01       	movw	r16, r28
    104a:	07 5a       	subi	r16, 0xA7	; 167
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	fe 01       	movw	r30, r28
    1050:	e3 5a       	subi	r30, 0xA3	; 163
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	60 81       	ld	r22, Z
    1056:	71 81       	ldd	r23, Z+1	; 0x01
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	2b ea       	ldi	r18, 0xAB	; 171
    105e:	3a ea       	ldi	r19, 0xAA	; 170
    1060:	4a ea       	ldi	r20, 0xAA	; 170
    1062:	5e e3       	ldi	r21, 0x3E	; 62
    1064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	f8 01       	movw	r30, r16
    106e:	80 83       	st	Z, r24
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	a2 83       	std	Z+2, r26	; 0x02
    1074:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1076:	fe 01       	movw	r30, r28
    1078:	e7 5a       	subi	r30, 0xA7	; 167
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e8       	ldi	r20, 0x80	; 128
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1090:	88 23       	and	r24, r24
    1092:	34 f4       	brge	.+12     	; 0x10a0 <LCD_sendCommand+0x30c>
		__ticks = 1;
    1094:	fe 01       	movw	r30, r28
    1096:	e8 5a       	subi	r30, 0xA8	; 168
    1098:	ff 4f       	sbci	r31, 0xFF	; 255
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 83       	st	Z, r24
    109e:	e0 c0       	rjmp	.+448    	; 0x1260 <LCD_sendCommand+0x4cc>
	else if (__tmp > 255)
    10a0:	fe 01       	movw	r30, r28
    10a2:	e7 5a       	subi	r30, 0xA7	; 167
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	60 81       	ld	r22, Z
    10a8:	71 81       	ldd	r23, Z+1	; 0x01
    10aa:	82 81       	ldd	r24, Z+2	; 0x02
    10ac:	93 81       	ldd	r25, Z+3	; 0x03
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	53 e4       	ldi	r21, 0x43	; 67
    10b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ba:	18 16       	cp	r1, r24
    10bc:	0c f0       	brlt	.+2      	; 0x10c0 <LCD_sendCommand+0x32c>
    10be:	c0 c0       	rjmp	.+384    	; 0x1240 <LCD_sendCommand+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    10c0:	fe 01       	movw	r30, r28
    10c2:	e3 5a       	subi	r30, 0xA3	; 163
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	60 81       	ld	r22, Z
    10c8:	71 81       	ldd	r23, Z+1	; 0x01
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4a e7       	ldi	r20, 0x7A	; 122
    10d4:	54 e4       	ldi	r21, 0x44	; 68
    10d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	fe 01       	movw	r30, r28
    10e0:	ec 5a       	subi	r30, 0xAC	; 172
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 83       	st	Z, r24
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	a2 83       	std	Z+2, r26	; 0x02
    10ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ec:	8e 01       	movw	r16, r28
    10ee:	00 5b       	subi	r16, 0xB0	; 176
    10f0:	1f 4f       	sbci	r17, 0xFF	; 255
    10f2:	fe 01       	movw	r30, r28
    10f4:	ec 5a       	subi	r30, 0xAC	; 172
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a e7       	ldi	r20, 0x7A	; 122
    1106:	53 e4       	ldi	r21, 0x43	; 67
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	f8 01       	movw	r30, r16
    1112:	80 83       	st	Z, r24
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	a2 83       	std	Z+2, r26	; 0x02
    1118:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    111a:	fe 01       	movw	r30, r28
    111c:	e0 5b       	subi	r30, 0xB0	; 176
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1134:	88 23       	and	r24, r24
    1136:	44 f4       	brge	.+16     	; 0x1148 <LCD_sendCommand+0x3b4>
		__ticks = 1;
    1138:	fe 01       	movw	r30, r28
    113a:	e2 5b       	subi	r30, 0xB2	; 178
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	91 83       	std	Z+1, r25	; 0x01
    1144:	80 83       	st	Z, r24
    1146:	64 c0       	rjmp	.+200    	; 0x1210 <LCD_sendCommand+0x47c>
	else if (__tmp > 65535)
    1148:	fe 01       	movw	r30, r28
    114a:	e0 5b       	subi	r30, 0xB0	; 176
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	0c f0       	brlt	.+2      	; 0x1168 <LCD_sendCommand+0x3d4>
    1166:	43 c0       	rjmp	.+134    	; 0x11ee <LCD_sendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1168:	fe 01       	movw	r30, r28
    116a:	ec 5a       	subi	r30, 0xAC	; 172
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	8e 01       	movw	r16, r28
    1188:	02 5b       	subi	r16, 0xB2	; 178
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	f8 01       	movw	r30, r16
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24
    119e:	1f c0       	rjmp	.+62     	; 0x11de <LCD_sendCommand+0x44a>
    11a0:	fe 01       	movw	r30, r28
    11a2:	e4 5b       	subi	r30, 0xB4	; 180
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	89 e1       	ldi	r24, 0x19	; 25
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ae:	fe 01       	movw	r30, r28
    11b0:	e4 5b       	subi	r30, 0xB4	; 180
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <LCD_sendCommand+0x424>
    11bc:	fe 01       	movw	r30, r28
    11be:	e4 5b       	subi	r30, 0xB4	; 180
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c6:	de 01       	movw	r26, r28
    11c8:	a2 5b       	subi	r26, 0xB2	; 178
    11ca:	bf 4f       	sbci	r27, 0xFF	; 255
    11cc:	fe 01       	movw	r30, r28
    11ce:	e2 5b       	subi	r30, 0xB2	; 178
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	9c 93       	st	X, r25
    11dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	fe 01       	movw	r30, r28
    11e0:	e2 5b       	subi	r30, 0xB2	; 178
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	d1 f6       	brne	.-76     	; 0x11a0 <LCD_sendCommand+0x40c>
    11ec:	4b c0       	rjmp	.+150    	; 0x1284 <LCD_sendCommand+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ee:	8e 01       	movw	r16, r28
    11f0:	02 5b       	subi	r16, 0xB2	; 178
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	fe 01       	movw	r30, r28
    11f6:	e0 5b       	subi	r30, 0xB0	; 176
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	80 83       	st	Z, r24
    1210:	de 01       	movw	r26, r28
    1212:	a6 5b       	subi	r26, 0xB6	; 182
    1214:	bf 4f       	sbci	r27, 0xFF	; 255
    1216:	fe 01       	movw	r30, r28
    1218:	e2 5b       	subi	r30, 0xB2	; 178
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	9c 93       	st	X, r25
    1224:	8e 93       	st	-X, r24
    1226:	fe 01       	movw	r30, r28
    1228:	e6 5b       	subi	r30, 0xB6	; 182
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <LCD_sendCommand+0x49c>
    1234:	fe 01       	movw	r30, r28
    1236:	e6 5b       	subi	r30, 0xB6	; 182
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
    123e:	22 c0       	rjmp	.+68     	; 0x1284 <LCD_sendCommand+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1240:	8e 01       	movw	r16, r28
    1242:	08 5a       	subi	r16, 0xA8	; 168
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	fe 01       	movw	r30, r28
    1248:	e7 5a       	subi	r30, 0xA7	; 167
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	60 81       	ld	r22, Z
    124e:	71 81       	ldd	r23, Z+1	; 0x01
    1250:	82 81       	ldd	r24, Z+2	; 0x02
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	f8 01       	movw	r30, r16
    125e:	80 83       	st	Z, r24
    1260:	de 01       	movw	r26, r28
    1262:	a7 5b       	subi	r26, 0xB7	; 183
    1264:	bf 4f       	sbci	r27, 0xFF	; 255
    1266:	fe 01       	movw	r30, r28
    1268:	e8 5a       	subi	r30, 0xA8	; 168
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1270:	fe 01       	movw	r30, r28
    1272:	e7 5b       	subi	r30, 0xB7	; 183
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	8a 95       	dec	r24
    127a:	f1 f7       	brne	.-4      	; 0x1278 <LCD_sendCommand+0x4e4>
    127c:	fe 01       	movw	r30, r28
    127e:	e7 5b       	subi	r30, 0xB7	; 183
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	80 83       	st	Z, r24
	_delay_us(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_us(1);

#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = 0xFF;
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8f ef       	ldi	r24, 0xFF	; 255
    128a:	80 83       	st	Z, r24
    128c:	fe 01       	movw	r30, r28
    128e:	eb 5b       	subi	r30, 0xBB	; 187
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e8       	ldi	r26, 0x80	; 128
    1298:	bf e3       	ldi	r27, 0x3F	; 63
    129a:	80 83       	st	Z, r24
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	a2 83       	std	Z+2, r26	; 0x02
    12a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12a2:	8e 01       	movw	r16, r28
    12a4:	0f 5b       	subi	r16, 0xBF	; 191
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	fe 01       	movw	r30, r28
    12aa:	eb 5b       	subi	r30, 0xBB	; 187
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	2b ea       	ldi	r18, 0xAB	; 171
    12b8:	3a ea       	ldi	r19, 0xAA	; 170
    12ba:	4a ea       	ldi	r20, 0xAA	; 170
    12bc:	5e e3       	ldi	r21, 0x3E	; 62
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	f8 01       	movw	r30, r16
    12c8:	80 83       	st	Z, r24
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	a2 83       	std	Z+2, r26	; 0x02
    12ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12d0:	fe 01       	movw	r30, r28
    12d2:	ef 5b       	subi	r30, 0xBF	; 191
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e8       	ldi	r20, 0x80	; 128
    12e4:	5f e3       	ldi	r21, 0x3F	; 63
    12e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ea:	88 23       	and	r24, r24
    12ec:	34 f4       	brge	.+12     	; 0x12fa <LCD_sendCommand+0x566>
		__ticks = 1;
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	fe 01       	movw	r30, r28
    12f2:	e0 5c       	subi	r30, 0xC0	; 192
    12f4:	ff 4f       	sbci	r31, 0xFF	; 255
    12f6:	80 83       	st	Z, r24
    12f8:	9d c0       	rjmp	.+314    	; 0x1434 <LCD_sendCommand+0x6a0>
	else if (__tmp > 255)
    12fa:	fe 01       	movw	r30, r28
    12fc:	ef 5b       	subi	r30, 0xBF	; 191
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4f e7       	ldi	r20, 0x7F	; 127
    130e:	53 e4       	ldi	r21, 0x43	; 67
    1310:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1314:	18 16       	cp	r1, r24
    1316:	0c f0       	brlt	.+2      	; 0x131a <LCD_sendCommand+0x586>
    1318:	7e c0       	rjmp	.+252    	; 0x1416 <LCD_sendCommand+0x682>
	{
		_delay_ms(__us / 1000.0);
    131a:	fe 01       	movw	r30, r28
    131c:	eb 5b       	subi	r30, 0xBB	; 187
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	60 81       	ld	r22, Z
    1322:	71 81       	ldd	r23, Z+1	; 0x01
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	54 e4       	ldi	r21, 0x44	; 68
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8c af       	std	Y+60, r24	; 0x3c
    133a:	9d af       	std	Y+61, r25	; 0x3d
    133c:	ae af       	std	Y+62, r26	; 0x3e
    133e:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1340:	6c ad       	ldd	r22, Y+60	; 0x3c
    1342:	7d ad       	ldd	r23, Y+61	; 0x3d
    1344:	8e ad       	ldd	r24, Y+62	; 0x3e
    1346:	9f ad       	ldd	r25, Y+63	; 0x3f
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	4a e7       	ldi	r20, 0x7A	; 122
    134e:	53 e4       	ldi	r21, 0x43	; 67
    1350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	88 af       	std	Y+56, r24	; 0x38
    135a:	99 af       	std	Y+57, r25	; 0x39
    135c:	aa af       	std	Y+58, r26	; 0x3a
    135e:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1360:	68 ad       	ldd	r22, Y+56	; 0x38
    1362:	79 ad       	ldd	r23, Y+57	; 0x39
    1364:	8a ad       	ldd	r24, Y+58	; 0x3a
    1366:	9b ad       	ldd	r25, Y+59	; 0x3b
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	2c f4       	brge	.+10     	; 0x1382 <LCD_sendCommand+0x5ee>
		__ticks = 1;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9f ab       	std	Y+55, r25	; 0x37
    137e:	8e ab       	std	Y+54, r24	; 0x36
    1380:	3f c0       	rjmp	.+126    	; 0x1400 <LCD_sendCommand+0x66c>
	else if (__tmp > 65535)
    1382:	68 ad       	ldd	r22, Y+56	; 0x38
    1384:	79 ad       	ldd	r23, Y+57	; 0x39
    1386:	8a ad       	ldd	r24, Y+58	; 0x3a
    1388:	9b ad       	ldd	r25, Y+59	; 0x3b
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	3f ef       	ldi	r19, 0xFF	; 255
    138e:	4f e7       	ldi	r20, 0x7F	; 127
    1390:	57 e4       	ldi	r21, 0x47	; 71
    1392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1396:	18 16       	cp	r1, r24
    1398:	4c f5       	brge	.+82     	; 0x13ec <LCD_sendCommand+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    139a:	6c ad       	ldd	r22, Y+60	; 0x3c
    139c:	7d ad       	ldd	r23, Y+61	; 0x3d
    139e:	8e ad       	ldd	r24, Y+62	; 0x3e
    13a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	40 e2       	ldi	r20, 0x20	; 32
    13a8:	51 e4       	ldi	r21, 0x41	; 65
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	bc 01       	movw	r22, r24
    13b4:	cd 01       	movw	r24, r26
    13b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	9f ab       	std	Y+55, r25	; 0x37
    13c0:	8e ab       	std	Y+54, r24	; 0x36
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <LCD_sendCommand+0x64e>
    13c4:	89 e1       	ldi	r24, 0x19	; 25
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	9d ab       	std	Y+53, r25	; 0x35
    13ca:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13cc:	8c a9       	ldd	r24, Y+52	; 0x34
    13ce:	9d a9       	ldd	r25, Y+53	; 0x35
    13d0:	01 97       	sbiw	r24, 0x01	; 1
    13d2:	f1 f7       	brne	.-4      	; 0x13d0 <LCD_sendCommand+0x63c>
    13d4:	9d ab       	std	Y+53, r25	; 0x35
    13d6:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	8e a9       	ldd	r24, Y+54	; 0x36
    13da:	9f a9       	ldd	r25, Y+55	; 0x37
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9f ab       	std	Y+55, r25	; 0x37
    13e0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e2:	8e a9       	ldd	r24, Y+54	; 0x36
    13e4:	9f a9       	ldd	r25, Y+55	; 0x37
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	69 f7       	brne	.-38     	; 0x13c4 <LCD_sendCommand+0x630>
    13ea:	2d c0       	rjmp	.+90     	; 0x1446 <LCD_sendCommand+0x6b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ec:	68 ad       	ldd	r22, Y+56	; 0x38
    13ee:	79 ad       	ldd	r23, Y+57	; 0x39
    13f0:	8a ad       	ldd	r24, Y+58	; 0x3a
    13f2:	9b ad       	ldd	r25, Y+59	; 0x3b
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9f ab       	std	Y+55, r25	; 0x37
    13fe:	8e ab       	std	Y+54, r24	; 0x36
    1400:	8e a9       	ldd	r24, Y+54	; 0x36
    1402:	9f a9       	ldd	r25, Y+55	; 0x37
    1404:	9b ab       	std	Y+51, r25	; 0x33
    1406:	8a ab       	std	Y+50, r24	; 0x32
    1408:	8a a9       	ldd	r24, Y+50	; 0x32
    140a:	9b a9       	ldd	r25, Y+51	; 0x33
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <LCD_sendCommand+0x678>
    1410:	9b ab       	std	Y+51, r25	; 0x33
    1412:	8a ab       	std	Y+50, r24	; 0x32
    1414:	18 c0       	rjmp	.+48     	; 0x1446 <LCD_sendCommand+0x6b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1416:	fe 01       	movw	r30, r28
    1418:	ef 5b       	subi	r30, 0xBF	; 191
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	fe 01       	movw	r30, r28
    142e:	e0 5c       	subi	r30, 0xC0	; 192
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	80 83       	st	Z, r24
    1434:	fe 01       	movw	r30, r28
    1436:	e0 5c       	subi	r30, 0xC0	; 192
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    143e:	89 a9       	ldd	r24, Y+49	; 0x31
    1440:	8a 95       	dec	r24
    1442:	f1 f7       	brne	.-4      	; 0x1440 <LCD_sendCommand+0x6ac>
    1444:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	LCD_DATA_PORT = command;
    1446:	a5 e3       	ldi	r26, 0x35	; 53
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	fe 01       	movw	r30, r28
    144c:	e7 58       	subi	r30, 0x87	; 135
    144e:	ff 4f       	sbci	r31, 0xFF	; 255
    1450:	80 81       	ld	r24, Z
    1452:	8c 93       	st	X, r24
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a0 e8       	ldi	r26, 0x80	; 128
    145a:	bf e3       	ldi	r27, 0x3F	; 63
    145c:	8d a7       	std	Y+45, r24	; 0x2d
    145e:	9e a7       	std	Y+46, r25	; 0x2e
    1460:	af a7       	std	Y+47, r26	; 0x2f
    1462:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1464:	6d a5       	ldd	r22, Y+45	; 0x2d
    1466:	7e a5       	ldd	r23, Y+46	; 0x2e
    1468:	8f a5       	ldd	r24, Y+47	; 0x2f
    146a:	98 a9       	ldd	r25, Y+48	; 0x30
    146c:	2b ea       	ldi	r18, 0xAB	; 171
    146e:	3a ea       	ldi	r19, 0xAA	; 170
    1470:	4a ea       	ldi	r20, 0xAA	; 170
    1472:	5e e3       	ldi	r21, 0x3E	; 62
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	89 a7       	std	Y+41, r24	; 0x29
    147e:	9a a7       	std	Y+42, r25	; 0x2a
    1480:	ab a7       	std	Y+43, r26	; 0x2b
    1482:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1484:	69 a5       	ldd	r22, Y+41	; 0x29
    1486:	7a a5       	ldd	r23, Y+42	; 0x2a
    1488:	8b a5       	ldd	r24, Y+43	; 0x2b
    148a:	9c a5       	ldd	r25, Y+44	; 0x2c
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e8       	ldi	r20, 0x80	; 128
    1492:	5f e3       	ldi	r21, 0x3F	; 63
    1494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1498:	88 23       	and	r24, r24
    149a:	1c f4       	brge	.+6      	; 0x14a2 <LCD_sendCommand+0x70e>
		__ticks = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	88 a7       	std	Y+40, r24	; 0x28
    14a0:	91 c0       	rjmp	.+290    	; 0x15c4 <LCD_sendCommand+0x830>
	else if (__tmp > 255)
    14a2:	69 a5       	ldd	r22, Y+41	; 0x29
    14a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    14a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	53 e4       	ldi	r21, 0x43	; 67
    14b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <LCD_sendCommand+0x728>
    14ba:	7b c0       	rjmp	.+246    	; 0x15b2 <LCD_sendCommand+0x81e>
	{
		_delay_ms(__us / 1000.0);
    14bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    14be:	7e a5       	ldd	r23, Y+46	; 0x2e
    14c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c2:	98 a9       	ldd	r25, Y+48	; 0x30
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a e7       	ldi	r20, 0x7A	; 122
    14ca:	54 e4       	ldi	r21, 0x44	; 68
    14cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	8c a3       	std	Y+36, r24	; 0x24
    14d6:	9d a3       	std	Y+37, r25	; 0x25
    14d8:	ae a3       	std	Y+38, r26	; 0x26
    14da:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	6c a1       	ldd	r22, Y+36	; 0x24
    14de:	7d a1       	ldd	r23, Y+37	; 0x25
    14e0:	8e a1       	ldd	r24, Y+38	; 0x26
    14e2:	9f a1       	ldd	r25, Y+39	; 0x27
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4a e7       	ldi	r20, 0x7A	; 122
    14ea:	53 e4       	ldi	r21, 0x43	; 67
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	88 a3       	std	Y+32, r24	; 0x20
    14f6:	99 a3       	std	Y+33, r25	; 0x21
    14f8:	aa a3       	std	Y+34, r26	; 0x22
    14fa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    14fc:	68 a1       	ldd	r22, Y+32	; 0x20
    14fe:	79 a1       	ldd	r23, Y+33	; 0x21
    1500:	8a a1       	ldd	r24, Y+34	; 0x22
    1502:	9b a1       	ldd	r25, Y+35	; 0x23
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1510:	88 23       	and	r24, r24
    1512:	2c f4       	brge	.+10     	; 0x151e <LCD_sendCommand+0x78a>
		__ticks = 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9f 8f       	std	Y+31, r25	; 0x1f
    151a:	8e 8f       	std	Y+30, r24	; 0x1e
    151c:	3f c0       	rjmp	.+126    	; 0x159c <LCD_sendCommand+0x808>
	else if (__tmp > 65535)
    151e:	68 a1       	ldd	r22, Y+32	; 0x20
    1520:	79 a1       	ldd	r23, Y+33	; 0x21
    1522:	8a a1       	ldd	r24, Y+34	; 0x22
    1524:	9b a1       	ldd	r25, Y+35	; 0x23
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	57 e4       	ldi	r21, 0x47	; 71
    152e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1532:	18 16       	cp	r1, r24
    1534:	4c f5       	brge	.+82     	; 0x1588 <LCD_sendCommand+0x7f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1536:	6c a1       	ldd	r22, Y+36	; 0x24
    1538:	7d a1       	ldd	r23, Y+37	; 0x25
    153a:	8e a1       	ldd	r24, Y+38	; 0x26
    153c:	9f a1       	ldd	r25, Y+39	; 0x27
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e2       	ldi	r20, 0x20	; 32
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9f 8f       	std	Y+31, r25	; 0x1f
    155c:	8e 8f       	std	Y+30, r24	; 0x1e
    155e:	0f c0       	rjmp	.+30     	; 0x157e <LCD_sendCommand+0x7ea>
    1560:	89 e1       	ldi	r24, 0x19	; 25
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9d 8f       	std	Y+29, r25	; 0x1d
    1566:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1568:	8c 8d       	ldd	r24, Y+28	; 0x1c
    156a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <LCD_sendCommand+0x7d8>
    1570:	9d 8f       	std	Y+29, r25	; 0x1d
    1572:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1574:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1576:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	9f 8f       	std	Y+31, r25	; 0x1f
    157c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1580:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	69 f7       	brne	.-38     	; 0x1560 <LCD_sendCommand+0x7cc>
    1586:	24 c0       	rjmp	.+72     	; 0x15d0 <LCD_sendCommand+0x83c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	68 a1       	ldd	r22, Y+32	; 0x20
    158a:	79 a1       	ldd	r23, Y+33	; 0x21
    158c:	8a a1       	ldd	r24, Y+34	; 0x22
    158e:	9b a1       	ldd	r25, Y+35	; 0x23
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9f 8f       	std	Y+31, r25	; 0x1f
    159a:	8e 8f       	std	Y+30, r24	; 0x1e
    159c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    159e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15a0:	9b 8f       	std	Y+27, r25	; 0x1b
    15a2:	8a 8f       	std	Y+26, r24	; 0x1a
    15a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <LCD_sendCommand+0x814>
    15ac:	9b 8f       	std	Y+27, r25	; 0x1b
    15ae:	8a 8f       	std	Y+26, r24	; 0x1a
    15b0:	0f c0       	rjmp	.+30     	; 0x15d0 <LCD_sendCommand+0x83c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15b2:	69 a5       	ldd	r22, Y+41	; 0x29
    15b4:	7a a5       	ldd	r23, Y+42	; 0x2a
    15b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	88 a7       	std	Y+40, r24	; 0x28
    15c4:	88 a5       	ldd	r24, Y+40	; 0x28
    15c6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15c8:	89 8d       	ldd	r24, Y+25	; 0x19
    15ca:	8a 95       	dec	r24
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_sendCommand+0x836>
    15ce:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	8b 7f       	andi	r24, 0xFB	; 251
    15dc:	8c 93       	st	X, r24
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a0 e8       	ldi	r26, 0x80	; 128
    15e4:	bf e3       	ldi	r27, 0x3F	; 63
    15e6:	8d 8b       	std	Y+21, r24	; 0x15
    15e8:	9e 8b       	std	Y+22, r25	; 0x16
    15ea:	af 8b       	std	Y+23, r26	; 0x17
    15ec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15ee:	6d 89       	ldd	r22, Y+21	; 0x15
    15f0:	7e 89       	ldd	r23, Y+22	; 0x16
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	2b ea       	ldi	r18, 0xAB	; 171
    15f8:	3a ea       	ldi	r19, 0xAA	; 170
    15fa:	4a ea       	ldi	r20, 0xAA	; 170
    15fc:	5e e3       	ldi	r21, 0x3E	; 62
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	89 8b       	std	Y+17, r24	; 0x11
    1608:	9a 8b       	std	Y+18, r25	; 0x12
    160a:	ab 8b       	std	Y+19, r26	; 0x13
    160c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    160e:	69 89       	ldd	r22, Y+17	; 0x11
    1610:	7a 89       	ldd	r23, Y+18	; 0x12
    1612:	8b 89       	ldd	r24, Y+19	; 0x13
    1614:	9c 89       	ldd	r25, Y+20	; 0x14
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	1c f4       	brge	.+6      	; 0x162c <LCD_sendCommand+0x898>
		__ticks = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	88 8b       	std	Y+16, r24	; 0x10
    162a:	91 c0       	rjmp	.+290    	; 0x174e <LCD_sendCommand+0x9ba>
	else if (__tmp > 255)
    162c:	69 89       	ldd	r22, Y+17	; 0x11
    162e:	7a 89       	ldd	r23, Y+18	; 0x12
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	53 e4       	ldi	r21, 0x43	; 67
    163c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	0c f0       	brlt	.+2      	; 0x1646 <LCD_sendCommand+0x8b2>
    1644:	7b c0       	rjmp	.+246    	; 0x173c <LCD_sendCommand+0x9a8>
	{
		_delay_ms(__us / 1000.0);
    1646:	6d 89       	ldd	r22, Y+21	; 0x15
    1648:	7e 89       	ldd	r23, Y+22	; 0x16
    164a:	8f 89       	ldd	r24, Y+23	; 0x17
    164c:	98 8d       	ldd	r25, Y+24	; 0x18
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	54 e4       	ldi	r21, 0x44	; 68
    1656:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	8c 87       	std	Y+12, r24	; 0x0c
    1660:	9d 87       	std	Y+13, r25	; 0x0d
    1662:	ae 87       	std	Y+14, r26	; 0x0e
    1664:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6c 85       	ldd	r22, Y+12	; 0x0c
    1668:	7d 85       	ldd	r23, Y+13	; 0x0d
    166a:	8e 85       	ldd	r24, Y+14	; 0x0e
    166c:	9f 85       	ldd	r25, Y+15	; 0x0f
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a e7       	ldi	r20, 0x7A	; 122
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	88 87       	std	Y+8, r24	; 0x08
    1680:	99 87       	std	Y+9, r25	; 0x09
    1682:	aa 87       	std	Y+10, r26	; 0x0a
    1684:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1686:	68 85       	ldd	r22, Y+8	; 0x08
    1688:	79 85       	ldd	r23, Y+9	; 0x09
    168a:	8a 85       	ldd	r24, Y+10	; 0x0a
    168c:	9b 85       	ldd	r25, Y+11	; 0x0b
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <LCD_sendCommand+0x914>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <LCD_sendCommand+0x992>
	else if (__tmp > 65535)
    16a8:	68 85       	ldd	r22, Y+8	; 0x08
    16aa:	79 85       	ldd	r23, Y+9	; 0x09
    16ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <LCD_sendCommand+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    16c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    16c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9f 83       	std	Y+7, r25	; 0x07
    16e6:	8e 83       	std	Y+6, r24	; 0x06
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <LCD_sendCommand+0x974>
    16ea:	89 e1       	ldi	r24, 0x19	; 25
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9d 83       	std	Y+5, r25	; 0x05
    16f0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f2:	8c 81       	ldd	r24, Y+4	; 0x04
    16f4:	9d 81       	ldd	r25, Y+5	; 0x05
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_sendCommand+0x962>
    16fa:	9d 83       	std	Y+5, r25	; 0x05
    16fc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1700:	9f 81       	ldd	r25, Y+7	; 0x07
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9f 83       	std	Y+7, r25	; 0x07
    1706:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8e 81       	ldd	r24, Y+6	; 0x06
    170a:	9f 81       	ldd	r25, Y+7	; 0x07
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <LCD_sendCommand+0x956>
    1710:	24 c0       	rjmp	.+72     	; 0x175a <LCD_sendCommand+0x9c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	68 85       	ldd	r22, Y+8	; 0x08
    1714:	79 85       	ldd	r23, Y+9	; 0x09
    1716:	8a 85       	ldd	r24, Y+10	; 0x0a
    1718:	9b 85       	ldd	r25, Y+11	; 0x0b
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9f 83       	std	Y+7, r25	; 0x07
    1724:	8e 83       	std	Y+6, r24	; 0x06
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	9b 83       	std	Y+3, r25	; 0x03
    172c:	8a 83       	std	Y+2, r24	; 0x02
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <LCD_sendCommand+0x99e>
    1736:	9b 83       	std	Y+3, r25	; 0x03
    1738:	8a 83       	std	Y+2, r24	; 0x02
    173a:	0f c0       	rjmp	.+30     	; 0x175a <LCD_sendCommand+0x9c6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    173c:	69 89       	ldd	r22, Y+17	; 0x11
    173e:	7a 89       	ldd	r23, Y+18	; 0x12
    1740:	8b 89       	ldd	r24, Y+19	; 0x13
    1742:	9c 89       	ldd	r25, Y+20	; 0x14
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	88 8b       	std	Y+16, r24	; 0x10
    174e:	88 89       	ldd	r24, Y+16	; 0x10
    1750:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	8a 95       	dec	r24
    1756:	f1 f7       	brne	.-4      	; 0x1754 <LCD_sendCommand+0x9c0>
    1758:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
#endif

}
    175a:	c7 58       	subi	r28, 0x87	; 135
    175c:	df 4f       	sbci	r29, 0xFF	; 255
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	c1 56       	subi	r28, 0x61	; 97
    1780:	d0 40       	sbci	r29, 0x00	; 0
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	fe 01       	movw	r30, r28
    178e:	ef 59       	subi	r30, 0x9F	; 159
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,Rs);
    1794:	a2 e3       	ldi	r26, 0x32	; 50
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e2 e3       	ldi	r30, 0x32	; 50
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	81 60       	ori	r24, 0x01	; 1
    17a0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8d 7f       	andi	r24, 0xFD	; 253
    17ae:	8c 93       	st	X, r24
    17b0:	fe 01       	movw	r30, r28
    17b2:	e3 5a       	subi	r30, 0xA3	; 163
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a0 e8       	ldi	r26, 0x80	; 128
    17bc:	bf e3       	ldi	r27, 0x3F	; 63
    17be:	80 83       	st	Z, r24
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	a2 83       	std	Z+2, r26	; 0x02
    17c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17c6:	8e 01       	movw	r16, r28
    17c8:	07 5a       	subi	r16, 0xA7	; 167
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	fe 01       	movw	r30, r28
    17ce:	e3 5a       	subi	r30, 0xA3	; 163
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	2b ea       	ldi	r18, 0xAB	; 171
    17dc:	3a ea       	ldi	r19, 0xAA	; 170
    17de:	4a ea       	ldi	r20, 0xAA	; 170
    17e0:	5e e3       	ldi	r21, 0x3E	; 62
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5a       	subi	r30, 0xA7	; 167
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	34 f4       	brge	.+12     	; 0x181e <LCD_displayCharacter+0xac>
		__ticks = 1;
    1812:	fe 01       	movw	r30, r28
    1814:	e8 5a       	subi	r30, 0xA8	; 168
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 83       	st	Z, r24
    181c:	e0 c0       	rjmp	.+448    	; 0x19de <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    181e:	fe 01       	movw	r30, r28
    1820:	e7 5a       	subi	r30, 0xA7	; 167
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	4f e7       	ldi	r20, 0x7F	; 127
    1832:	53 e4       	ldi	r21, 0x43	; 67
    1834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1838:	18 16       	cp	r1, r24
    183a:	0c f0       	brlt	.+2      	; 0x183e <LCD_displayCharacter+0xcc>
    183c:	c0 c0       	rjmp	.+384    	; 0x19be <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    183e:	fe 01       	movw	r30, r28
    1840:	e3 5a       	subi	r30, 0xA3	; 163
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	60 81       	ld	r22, Z
    1846:	71 81       	ldd	r23, Z+1	; 0x01
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a e7       	ldi	r20, 0x7A	; 122
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	fe 01       	movw	r30, r28
    185e:	ec 5a       	subi	r30, 0xAC	; 172
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	8e 01       	movw	r16, r28
    186c:	00 5b       	subi	r16, 0xB0	; 176
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	ec 5a       	subi	r30, 0xAC	; 172
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a e7       	ldi	r20, 0x7A	; 122
    1884:	53 e4       	ldi	r21, 0x43	; 67
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	f8 01       	movw	r30, r16
    1890:	80 83       	st	Z, r24
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	a2 83       	std	Z+2, r26	; 0x02
    1896:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1898:	fe 01       	movw	r30, r28
    189a:	e0 5b       	subi	r30, 0xB0	; 176
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e8       	ldi	r20, 0x80	; 128
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b2:	88 23       	and	r24, r24
    18b4:	44 f4       	brge	.+16     	; 0x18c6 <LCD_displayCharacter+0x154>
		__ticks = 1;
    18b6:	fe 01       	movw	r30, r28
    18b8:	e2 5b       	subi	r30, 0xB2	; 178
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	64 c0       	rjmp	.+200    	; 0x198e <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    18c6:	fe 01       	movw	r30, r28
    18c8:	e0 5b       	subi	r30, 0xB0	; 176
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	0c f0       	brlt	.+2      	; 0x18e6 <LCD_displayCharacter+0x174>
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e6:	fe 01       	movw	r30, r28
    18e8:	ec 5a       	subi	r30, 0xAC	; 172
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8e 01       	movw	r16, r28
    1906:	02 5b       	subi	r16, 0xB2	; 178
    1908:	1f 4f       	sbci	r17, 0xFF	; 255
    190a:	bc 01       	movw	r22, r24
    190c:	cd 01       	movw	r24, r26
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	f8 01       	movw	r30, r16
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    191c:	1f c0       	rjmp	.+62     	; 0x195c <LCD_displayCharacter+0x1ea>
    191e:	fe 01       	movw	r30, r28
    1920:	e4 5b       	subi	r30, 0xB4	; 180
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	89 e1       	ldi	r24, 0x19	; 25
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    192c:	fe 01       	movw	r30, r28
    192e:	e4 5b       	subi	r30, 0xB4	; 180
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <LCD_displayCharacter+0x1c4>
    193a:	fe 01       	movw	r30, r28
    193c:	e4 5b       	subi	r30, 0xB4	; 180
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	de 01       	movw	r26, r28
    1946:	a2 5b       	subi	r26, 0xB2	; 178
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	e2 5b       	subi	r30, 0xB2	; 178
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	9c 93       	st	X, r25
    195a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195c:	fe 01       	movw	r30, r28
    195e:	e2 5b       	subi	r30, 0xB2	; 178
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	d1 f6       	brne	.-76     	; 0x191e <LCD_displayCharacter+0x1ac>
    196a:	4b c0       	rjmp	.+150    	; 0x1a02 <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196c:	8e 01       	movw	r16, r28
    196e:	02 5b       	subi	r16, 0xB2	; 178
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	fe 01       	movw	r30, r28
    1974:	e0 5b       	subi	r30, 0xB0	; 176
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	de 01       	movw	r26, r28
    1990:	a6 5b       	subi	r26, 0xB6	; 182
    1992:	bf 4f       	sbci	r27, 0xFF	; 255
    1994:	fe 01       	movw	r30, r28
    1996:	e2 5b       	subi	r30, 0xB2	; 178
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	11 96       	adiw	r26, 0x01	; 1
    19a0:	9c 93       	st	X, r25
    19a2:	8e 93       	st	-X, r24
    19a4:	fe 01       	movw	r30, r28
    19a6:	e6 5b       	subi	r30, 0xB6	; 182
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	91 81       	ldd	r25, Z+1	; 0x01
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <LCD_displayCharacter+0x23c>
    19b2:	fe 01       	movw	r30, r28
    19b4:	e6 5b       	subi	r30, 0xB6	; 182
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
    19bc:	22 c0       	rjmp	.+68     	; 0x1a02 <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19be:	8e 01       	movw	r16, r28
    19c0:	08 5a       	subi	r16, 0xA8	; 168
    19c2:	1f 4f       	sbci	r17, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	e7 5a       	subi	r30, 0xA7	; 167
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	60 81       	ld	r22, Z
    19cc:	71 81       	ldd	r23, Z+1	; 0x01
    19ce:	82 81       	ldd	r24, Z+2	; 0x02
    19d0:	93 81       	ldd	r25, Z+3	; 0x03
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	f8 01       	movw	r30, r16
    19dc:	80 83       	st	Z, r24
    19de:	de 01       	movw	r26, r28
    19e0:	a7 5b       	subi	r26, 0xB7	; 183
    19e2:	bf 4f       	sbci	r27, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	e8 5a       	subi	r30, 0xA8	; 168
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 5b       	subi	r30, 0xB7	; 183
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	8a 95       	dec	r24
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_displayCharacter+0x284>
    19fa:	fe 01       	movw	r30, r28
    19fc:	e7 5b       	subi	r30, 0xB7	; 183
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	80 83       	st	Z, r24
	_delay_us(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1a02:	a2 e3       	ldi	r26, 0x32	; 50
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e2 e3       	ldi	r30, 0x32	; 50
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	84 60       	ori	r24, 0x04	; 4
    1a0e:	8c 93       	st	X, r24
    1a10:	fe 01       	movw	r30, r28
    1a12:	eb 5b       	subi	r30, 0xBB	; 187
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e8       	ldi	r26, 0x80	; 128
    1a1c:	bf e3       	ldi	r27, 0x3F	; 63
    1a1e:	80 83       	st	Z, r24
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	a2 83       	std	Z+2, r26	; 0x02
    1a24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a26:	8e 01       	movw	r16, r28
    1a28:	0f 5b       	subi	r16, 0xBF	; 191
    1a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	eb 5b       	subi	r30, 0xBB	; 187
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	60 81       	ld	r22, Z
    1a34:	71 81       	ldd	r23, Z+1	; 0x01
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	2b ea       	ldi	r18, 0xAB	; 171
    1a3c:	3a ea       	ldi	r19, 0xAA	; 170
    1a3e:	4a ea       	ldi	r20, 0xAA	; 170
    1a40:	5e e3       	ldi	r21, 0x3E	; 62
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	80 83       	st	Z, r24
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	a2 83       	std	Z+2, r26	; 0x02
    1a52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a54:	fe 01       	movw	r30, r28
    1a56:	ef 5b       	subi	r30, 0xBF	; 191
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	34 f4       	brge	.+12     	; 0x1a7e <LCD_displayCharacter+0x30c>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	fe 01       	movw	r30, r28
    1a76:	e0 5c       	subi	r30, 0xC0	; 192
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 83       	st	Z, r24
    1a7c:	9d c0       	rjmp	.+314    	; 0x1bb8 <LCD_displayCharacter+0x446>
	else if (__tmp > 255)
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ef 5b       	subi	r30, 0xBF	; 191
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	53 e4       	ldi	r21, 0x43	; 67
    1a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	0c f0       	brlt	.+2      	; 0x1a9e <LCD_displayCharacter+0x32c>
    1a9c:	7e c0       	rjmp	.+252    	; 0x1b9a <LCD_displayCharacter+0x428>
	{
		_delay_ms(__us / 1000.0);
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	eb 5b       	subi	r30, 0xBB	; 187
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a e7       	ldi	r20, 0x7A	; 122
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8c af       	std	Y+60, r24	; 0x3c
    1abe:	9d af       	std	Y+61, r25	; 0x3d
    1ac0:	ae af       	std	Y+62, r26	; 0x3e
    1ac2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ac6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ac8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1aca:	9f ad       	ldd	r25, Y+63	; 0x3f
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a e7       	ldi	r20, 0x7A	; 122
    1ad2:	53 e4       	ldi	r21, 0x43	; 67
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	88 af       	std	Y+56, r24	; 0x38
    1ade:	99 af       	std	Y+57, r25	; 0x39
    1ae0:	aa af       	std	Y+58, r26	; 0x3a
    1ae2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1ae4:	68 ad       	ldd	r22, Y+56	; 0x38
    1ae6:	79 ad       	ldd	r23, Y+57	; 0x39
    1ae8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1aea:	9b ad       	ldd	r25, Y+59	; 0x3b
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <LCD_displayCharacter+0x394>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9f ab       	std	Y+55, r25	; 0x37
    1b02:	8e ab       	std	Y+54, r24	; 0x36
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <LCD_displayCharacter+0x412>
	else if (__tmp > 65535)
    1b06:	68 ad       	ldd	r22, Y+56	; 0x38
    1b08:	79 ad       	ldd	r23, Y+57	; 0x39
    1b0a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b0c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	4c f5       	brge	.+82     	; 0x1b70 <LCD_displayCharacter+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b20:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b22:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b24:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9f ab       	std	Y+55, r25	; 0x37
    1b44:	8e ab       	std	Y+54, r24	; 0x36
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <LCD_displayCharacter+0x3f4>
    1b48:	89 e1       	ldi	r24, 0x19	; 25
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9d ab       	std	Y+53, r25	; 0x35
    1b4e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b50:	8c a9       	ldd	r24, Y+52	; 0x34
    1b52:	9d a9       	ldd	r25, Y+53	; 0x35
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <LCD_displayCharacter+0x3e2>
    1b58:	9d ab       	std	Y+53, r25	; 0x35
    1b5a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5c:	8e a9       	ldd	r24, Y+54	; 0x36
    1b5e:	9f a9       	ldd	r25, Y+55	; 0x37
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	9f ab       	std	Y+55, r25	; 0x37
    1b64:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	8e a9       	ldd	r24, Y+54	; 0x36
    1b68:	9f a9       	ldd	r25, Y+55	; 0x37
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	69 f7       	brne	.-38     	; 0x1b48 <LCD_displayCharacter+0x3d6>
    1b6e:	2d c0       	rjmp	.+90     	; 0x1bca <LCD_displayCharacter+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	68 ad       	ldd	r22, Y+56	; 0x38
    1b72:	79 ad       	ldd	r23, Y+57	; 0x39
    1b74:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b76:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9f ab       	std	Y+55, r25	; 0x37
    1b82:	8e ab       	std	Y+54, r24	; 0x36
    1b84:	8e a9       	ldd	r24, Y+54	; 0x36
    1b86:	9f a9       	ldd	r25, Y+55	; 0x37
    1b88:	9b ab       	std	Y+51, r25	; 0x33
    1b8a:	8a ab       	std	Y+50, r24	; 0x32
    1b8c:	8a a9       	ldd	r24, Y+50	; 0x32
    1b8e:	9b a9       	ldd	r25, Y+51	; 0x33
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_displayCharacter+0x41e>
    1b94:	9b ab       	std	Y+51, r25	; 0x33
    1b96:	8a ab       	std	Y+50, r24	; 0x32
    1b98:	18 c0       	rjmp	.+48     	; 0x1bca <LCD_displayCharacter+0x458>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ef 5b       	subi	r30, 0xBF	; 191
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e0 5c       	subi	r30, 0xC0	; 192
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 83       	st	Z, r24
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e0 5c       	subi	r30, 0xC0	; 192
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 81       	ld	r24, Z
    1bc0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bc2:	89 a9       	ldd	r24, Y+49	; 0x31
    1bc4:	8a 95       	dec	r24
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_displayCharacter+0x452>
    1bc8:	89 ab       	std	Y+49, r24	; 0x31
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data;
    1bca:	a5 e3       	ldi	r26, 0x35	; 53
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ef 59       	subi	r30, 0x9F	; 159
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8c 93       	st	X, r24
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	a0 e8       	ldi	r26, 0x80	; 128
    1bde:	bf e3       	ldi	r27, 0x3F	; 63
    1be0:	8d a7       	std	Y+45, r24	; 0x2d
    1be2:	9e a7       	std	Y+46, r25	; 0x2e
    1be4:	af a7       	std	Y+47, r26	; 0x2f
    1be6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1be8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bea:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bee:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf0:	2b ea       	ldi	r18, 0xAB	; 171
    1bf2:	3a ea       	ldi	r19, 0xAA	; 170
    1bf4:	4a ea       	ldi	r20, 0xAA	; 170
    1bf6:	5e e3       	ldi	r21, 0x3E	; 62
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	89 a7       	std	Y+41, r24	; 0x29
    1c02:	9a a7       	std	Y+42, r25	; 0x2a
    1c04:	ab a7       	std	Y+43, r26	; 0x2b
    1c06:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1c08:	69 a5       	ldd	r22, Y+41	; 0x29
    1c0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1c:	88 23       	and	r24, r24
    1c1e:	1c f4       	brge	.+6      	; 0x1c26 <LCD_displayCharacter+0x4b4>
		__ticks = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	88 a7       	std	Y+40, r24	; 0x28
    1c24:	91 c0       	rjmp	.+290    	; 0x1d48 <LCD_displayCharacter+0x5d6>
	else if (__tmp > 255)
    1c26:	69 a5       	ldd	r22, Y+41	; 0x29
    1c28:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	53 e4       	ldi	r21, 0x43	; 67
    1c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	0c f0       	brlt	.+2      	; 0x1c40 <LCD_displayCharacter+0x4ce>
    1c3e:	7b c0       	rjmp	.+246    	; 0x1d36 <LCD_displayCharacter+0x5c4>
	{
		_delay_ms(__us / 1000.0);
    1c40:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c42:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c46:	98 a9       	ldd	r25, Y+48	; 0x30
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a e7       	ldi	r20, 0x7A	; 122
    1c4e:	54 e4       	ldi	r21, 0x44	; 68
    1c50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8c a3       	std	Y+36, r24	; 0x24
    1c5a:	9d a3       	std	Y+37, r25	; 0x25
    1c5c:	ae a3       	std	Y+38, r26	; 0x26
    1c5e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6c a1       	ldd	r22, Y+36	; 0x24
    1c62:	7d a1       	ldd	r23, Y+37	; 0x25
    1c64:	8e a1       	ldd	r24, Y+38	; 0x26
    1c66:	9f a1       	ldd	r25, Y+39	; 0x27
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a e7       	ldi	r20, 0x7A	; 122
    1c6e:	53 e4       	ldi	r21, 0x43	; 67
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	88 a3       	std	Y+32, r24	; 0x20
    1c7a:	99 a3       	std	Y+33, r25	; 0x21
    1c7c:	aa a3       	std	Y+34, r26	; 0x22
    1c7e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c80:	68 a1       	ldd	r22, Y+32	; 0x20
    1c82:	79 a1       	ldd	r23, Y+33	; 0x21
    1c84:	8a a1       	ldd	r24, Y+34	; 0x22
    1c86:	9b a1       	ldd	r25, Y+35	; 0x23
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <LCD_displayCharacter+0x530>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9f 8f       	std	Y+31, r25	; 0x1f
    1c9e:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <LCD_displayCharacter+0x5ae>
	else if (__tmp > 65535)
    1ca2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ca4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ca6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ca8:	9b a1       	ldd	r25, Y+35	; 0x23
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <LCD_displayCharacter+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6c a1       	ldd	r22, Y+36	; 0x24
    1cbc:	7d a1       	ldd	r23, Y+37	; 0x25
    1cbe:	8e a1       	ldd	r24, Y+38	; 0x26
    1cc0:	9f a1       	ldd	r25, Y+39	; 0x27
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9f 8f       	std	Y+31, r25	; 0x1f
    1ce0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_displayCharacter+0x590>
    1ce4:	89 e1       	ldi	r24, 0x19	; 25
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9d 8f       	std	Y+29, r25	; 0x1d
    1cea:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_displayCharacter+0x57e>
    1cf4:	9d 8f       	std	Y+29, r25	; 0x1d
    1cf6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cfa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9f 8f       	std	Y+31, r25	; 0x1f
    1d00:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_displayCharacter+0x572>
    1d0a:	24 c0       	rjmp	.+72     	; 0x1d54 <LCD_displayCharacter+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	68 a1       	ldd	r22, Y+32	; 0x20
    1d0e:	79 a1       	ldd	r23, Y+33	; 0x21
    1d10:	8a a1       	ldd	r24, Y+34	; 0x22
    1d12:	9b a1       	ldd	r25, Y+35	; 0x23
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d22:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d24:	9b 8f       	std	Y+27, r25	; 0x1b
    1d26:	8a 8f       	std	Y+26, r24	; 0x1a
    1d28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_displayCharacter+0x5ba>
    1d30:	9b 8f       	std	Y+27, r25	; 0x1b
    1d32:	8a 8f       	std	Y+26, r24	; 0x1a
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LCD_displayCharacter+0x5e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d36:	69 a5       	ldd	r22, Y+41	; 0x29
    1d38:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	88 a7       	std	Y+40, r24	; 0x28
    1d48:	88 a5       	ldd	r24, Y+40	; 0x28
    1d4a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d4e:	8a 95       	dec	r24
    1d50:	f1 f7       	brne	.-4      	; 0x1d4e <LCD_displayCharacter+0x5dc>
    1d52:	89 8f       	std	Y+25, r24	; 0x19
#endif
	_delay_us(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1d54:	a2 e3       	ldi	r26, 0x32	; 50
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8b 7f       	andi	r24, 0xFB	; 251
    1d60:	8c 93       	st	X, r24
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	8d 8b       	std	Y+21, r24	; 0x15
    1d6c:	9e 8b       	std	Y+22, r25	; 0x16
    1d6e:	af 8b       	std	Y+23, r26	; 0x17
    1d70:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	2b ea       	ldi	r18, 0xAB	; 171
    1d7c:	3a ea       	ldi	r19, 0xAA	; 170
    1d7e:	4a ea       	ldi	r20, 0xAA	; 170
    1d80:	5e e3       	ldi	r21, 0x3E	; 62
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
    1d8c:	9a 8b       	std	Y+18, r25	; 0x12
    1d8e:	ab 8b       	std	Y+19, r26	; 0x13
    1d90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d92:	69 89       	ldd	r22, Y+17	; 0x11
    1d94:	7a 89       	ldd	r23, Y+18	; 0x12
    1d96:	8b 89       	ldd	r24, Y+19	; 0x13
    1d98:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	1c f4       	brge	.+6      	; 0x1db0 <LCD_displayCharacter+0x63e>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	88 8b       	std	Y+16, r24	; 0x10
    1dae:	91 c0       	rjmp	.+290    	; 0x1ed2 <LCD_displayCharacter+0x760>
	else if (__tmp > 255)
    1db0:	69 89       	ldd	r22, Y+17	; 0x11
    1db2:	7a 89       	ldd	r23, Y+18	; 0x12
    1db4:	8b 89       	ldd	r24, Y+19	; 0x13
    1db6:	9c 89       	ldd	r25, Y+20	; 0x14
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	53 e4       	ldi	r21, 0x43	; 67
    1dc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	0c f0       	brlt	.+2      	; 0x1dca <LCD_displayCharacter+0x658>
    1dc8:	7b c0       	rjmp	.+246    	; 0x1ec0 <LCD_displayCharacter+0x74e>
	{
		_delay_ms(__us / 1000.0);
    1dca:	6d 89       	ldd	r22, Y+21	; 0x15
    1dcc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dce:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a e7       	ldi	r20, 0x7A	; 122
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	8c 87       	std	Y+12, r24	; 0x0c
    1de4:	9d 87       	std	Y+13, r25	; 0x0d
    1de6:	ae 87       	std	Y+14, r26	; 0x0e
    1de8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dec:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1df0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a e7       	ldi	r20, 0x7A	; 122
    1df8:	53 e4       	ldi	r21, 0x43	; 67
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	88 87       	std	Y+8, r24	; 0x08
    1e04:	99 87       	std	Y+9, r25	; 0x09
    1e06:	aa 87       	std	Y+10, r26	; 0x0a
    1e08:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e0a:	68 85       	ldd	r22, Y+8	; 0x08
    1e0c:	79 85       	ldd	r23, Y+9	; 0x09
    1e0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <LCD_displayCharacter+0x6ba>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9f 83       	std	Y+7, r25	; 0x07
    1e28:	8e 83       	std	Y+6, r24	; 0x06
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <LCD_displayCharacter+0x738>
	else if (__tmp > 65535)
    1e2c:	68 85       	ldd	r22, Y+8	; 0x08
    1e2e:	79 85       	ldd	r23, Y+9	; 0x09
    1e30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <LCD_displayCharacter+0x724>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e46:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9f 83       	std	Y+7, r25	; 0x07
    1e6a:	8e 83       	std	Y+6, r24	; 0x06
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <LCD_displayCharacter+0x71a>
    1e6e:	89 e1       	ldi	r24, 0x19	; 25
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9d 83       	std	Y+5, r25	; 0x05
    1e74:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <LCD_displayCharacter+0x708>
    1e7e:	9d 83       	std	Y+5, r25	; 0x05
    1e80:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	8e 81       	ldd	r24, Y+6	; 0x06
    1e84:	9f 81       	ldd	r25, Y+7	; 0x07
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	9f 83       	std	Y+7, r25	; 0x07
    1e8a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <LCD_displayCharacter+0x6fc>
    1e94:	24 c0       	rjmp	.+72     	; 0x1ede <LCD_displayCharacter+0x76c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	68 85       	ldd	r22, Y+8	; 0x08
    1e98:	79 85       	ldd	r23, Y+9	; 0x09
    1e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9f 83       	std	Y+7, r25	; 0x07
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    1eac:	9f 81       	ldd	r25, Y+7	; 0x07
    1eae:	9b 83       	std	Y+3, r25	; 0x03
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_displayCharacter+0x744>
    1eba:	9b 83       	std	Y+3, r25	; 0x03
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	0f c0       	rjmp	.+30     	; 0x1ede <LCD_displayCharacter+0x76c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ec0:	69 89       	ldd	r22, Y+17	; 0x11
    1ec2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	88 8b       	std	Y+16, r24	; 0x10
    1ed2:	88 89       	ldd	r24, Y+16	; 0x10
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	8a 95       	dec	r24
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_displayCharacter+0x766>
    1edc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    1ede:	cf 59       	subi	r28, 0x9F	; 159
    1ee0:	df 4f       	sbci	r29, 0xFF	; 255
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	08 95       	ret

00001ef6 <LCD_displayString>:

void LCD_displayString(const char * str)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <LCD_displayString+0x6>
    1efc:	0f 92       	push	r0
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	9b 83       	std	Y+3, r25	; 0x03
    1f04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f06:	19 82       	std	Y+1, r1	; 0x01
    1f08:	0e c0       	rjmp	.+28     	; 0x1f26 <LCD_displayString+0x30>
	while( str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	9b 81       	ldd	r25, Y+3	; 0x03
    1f14:	fc 01       	movw	r30, r24
    1f16:	e2 0f       	add	r30, r18
    1f18:	f3 1f       	adc	r31, r19
    1f1a:	80 81       	ld	r24, Z
    1f1c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <LCD_displayCharacter>
		i++;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char * str)
{
	uint8 i = 0;
	while( str[i] != '\0')
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	fc 01       	movw	r30, r24
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	80 81       	ld	r24, Z
    1f38:	88 23       	and	r24, r24
    1f3a:	39 f7       	brne	.-50     	; 0x1f0a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <LCD_goToRowColumn+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <LCD_goToRowColumn+0x8>
    1f50:	0f 92       	push	r0
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3d 83       	std	Y+5, r19	; 0x05
    1f62:	2c 83       	std	Y+4, r18	; 0x04
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	c1 f0       	breq	.+48     	; 0x1f9e <LCD_goToRowColumn+0x56>
    1f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f70:	3d 81       	ldd	r19, Y+5	; 0x05
    1f72:	22 30       	cpi	r18, 0x02	; 2
    1f74:	31 05       	cpc	r19, r1
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_goToRowColumn+0x3a>
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <LCD_goToRowColumn+0x50>
    1f80:	19 c0       	rjmp	.+50     	; 0x1fb4 <LCD_goToRowColumn+0x6c>
    1f82:	2c 81       	ldd	r18, Y+4	; 0x04
    1f84:	3d 81       	ldd	r19, Y+5	; 0x05
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	31 05       	cpc	r19, r1
    1f8a:	69 f0       	breq	.+26     	; 0x1fa6 <LCD_goToRowColumn+0x5e>
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	91 05       	cpc	r25, r1
    1f94:	61 f0       	breq	.+24     	; 0x1fae <LCD_goToRowColumn+0x66>
    1f96:	0e c0       	rjmp	.+28     	; 0x1fb4 <LCD_goToRowColumn+0x6c>
	{
		case 0 : address = col;
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	89 83       	std	Y+1, r24	; 0x01
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <LCD_goToRowColumn+0x6c>
		break;
		case 1 : address = col + 0x40;
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	80 5c       	subi	r24, 0xC0	; 192
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <LCD_goToRowColumn+0x6c>
		break;
		case 2 : address = col + 0x10;
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	80 5f       	subi	r24, 0xF0	; 240
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	03 c0       	rjmp	.+6      	; 0x1fb4 <LCD_goToRowColumn+0x6c>
		break;
		case 3 : address = col + 0x05;
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	8b 5f       	subi	r24, 0xFB	; 251
    1fb2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(address | SET_CURSOR_LOCATION);
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	80 68       	ori	r24, 0x80	; 128
    1fb8:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCD_sendCommand>
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <LCD_displayStringRowColumn+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <LCD_displayStringRowColumn+0x8>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	6a 83       	std	Y+2, r22	; 0x02
    1fdc:	5c 83       	std	Y+4, r21	; 0x04
    1fde:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fe4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_displayString>
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <LCD_integertostring>:

void LCD_integertostring(int data)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	62 97       	sbiw	r28, 0x12	; 18
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	9a 8b       	std	Y+18, r25	; 0x12
    2014:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16];
	itoa(data,buffer,10);
    2016:	89 89       	ldd	r24, Y+17	; 0x11
    2018:	9a 89       	ldd	r25, Y+18	; 0x12
    201a:	9e 01       	movw	r18, r28
    201c:	2f 5f       	subi	r18, 0xFF	; 255
    201e:	3f 4f       	sbci	r19, 0xFF	; 255
    2020:	b9 01       	movw	r22, r18
    2022:	4a e0       	ldi	r20, 0x0A	; 10
    2024:	50 e0       	ldi	r21, 0x00	; 0
    2026:	0e 94 b1 11 	call	0x2362	; 0x2362 <itoa>
	LCD_displayString(buffer);
    202a:	ce 01       	movw	r24, r28
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_displayString>
}
    2032:	62 96       	adiw	r28, 0x12	; 18
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <LCD_clearScreen>:
void LCD_clearScreen()
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0e 94 ca 06 	call	0xd94	; 0xd94 <LCD_sendCommand>
}
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <main>:
#include "Timer_and_Interrupt.h"

volatile uint16 result;

int main()
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	2e 97       	sbiw	r28, 0x0e	; 14
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    206c:	0e 94 b2 06 	call	0xd64	; 0xd64 <LCD_init>
	ADC_init();
    2070:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <ADC_init>
	LCD_clearScreen();
    2074:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_clearScreen>
	LCD_displayString("Project 2");
    2078:	80 e6       	ldi	r24, 0x60	; 96
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_displayString>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e8       	ldi	r25, 0x80	; 128
    2084:	ab eb       	ldi	r26, 0xBB	; 187
    2086:	b4 e4       	ldi	r27, 0x44	; 68
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	9c 87       	std	Y+12, r25	; 0x0c
    208c:	ad 87       	std	Y+13, r26	; 0x0d
    208e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	53 e4       	ldi	r21, 0x43	; 67
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	98 87       	std	Y+8, r25	; 0x08
    20ac:	a9 87       	std	Y+9, r26	; 0x09
    20ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <main+0x7a>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <main+0xf8>
	else if (__tmp > 65535)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <main+0xda>
    2114:	89 e1       	ldi	r24, 0x19	; 25
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <main+0xc8>
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <main+0xbc>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <main+0x104>
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_clearScreen();
    2164:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_clearScreen>
	LCD_displayString("ADC Value = ");
    2168:	8a e6       	ldi	r24, 0x6A	; 106
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_displayString>
	DDRB |= (1<<PB3);
    2170:	a7 e3       	ldi	r26, 0x37	; 55
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e7 e3       	ldi	r30, 0x37	; 55
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	88 60       	ori	r24, 0x08	; 8
    217c:	8c 93       	st	X, r24
	DDRB |= 0x03;
    217e:	a7 e3       	ldi	r26, 0x37	; 55
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e7 e3       	ldi	r30, 0x37	; 55
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	83 60       	ori	r24, 0x03	; 3
    218a:	8c 93       	st	X, r24
	INT1_Init();
    218c:	0e 94 56 11 	call	0x22ac	; 0x22ac <INT1_Init>

	while(1)
	{
		LCD_goToRowColumn(0,12);
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	6c e0       	ldi	r22, 0x0C	; 12
    2194:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <LCD_goToRowColumn>
		ADC_read_channel(0);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	0e 94 88 06 	call	0xd10	; 0xd10 <ADC_read_channel>
		result = adc;
    219e:	80 91 80 00 	lds	r24, 0x0080
    21a2:	90 91 81 00 	lds	r25, 0x0081
    21a6:	a0 91 82 00 	lds	r26, 0x0082
    21aa:	b0 91 83 00 	lds	r27, 0x0083
    21ae:	90 93 86 00 	sts	0x0086, r25
    21b2:	80 93 85 00 	sts	0x0085, r24
		LCD_integertostring(result);
    21b6:	80 91 85 00 	lds	r24, 0x0085
    21ba:	90 91 86 00 	lds	r25, 0x0086
    21be:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <LCD_integertostring>
		Timer0_Fast_PWM(result/4);
    21c2:	80 91 85 00 	lds	r24, 0x0085
    21c6:	90 91 86 00 	lds	r25, 0x0086
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	96 95       	lsr	r25
    21d0:	87 95       	ror	r24
    21d2:	0e 94 11 11 	call	0x2222	; 0x2222 <Timer0_Fast_PWM>
		if (flag == 0 )
    21d6:	80 91 84 00 	lds	r24, 0x0084
    21da:	88 23       	and	r24, r24
    21dc:	79 f4       	brne	.+30     	; 0x21fc <main+0x1a4>
		{
			// Rotate the motor --> clock wise
			PORTB &= (~(1<<PB0));
    21de:	a8 e3       	ldi	r26, 0x38	; 56
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e8 e3       	ldi	r30, 0x38	; 56
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8e 7f       	andi	r24, 0xFE	; 254
    21ea:	8c 93       	st	X, r24
			PORTB |= (1<<PB1);
    21ec:	a8 e3       	ldi	r26, 0x38	; 56
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e8 e3       	ldi	r30, 0x38	; 56
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	82 60       	ori	r24, 0x02	; 2
    21f8:	8c 93       	st	X, r24
    21fa:	ca cf       	rjmp	.-108    	; 0x2190 <main+0x138>
		}
		else if(flag == 1)
    21fc:	80 91 84 00 	lds	r24, 0x0084
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	31 f6       	brne	.-116    	; 0x2190 <main+0x138>
		{
			// Rotate the motor --> anti-clock wise
			PORTB |= (1<<PB0);
    2204:	a8 e3       	ldi	r26, 0x38	; 56
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e8 e3       	ldi	r30, 0x38	; 56
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	81 60       	ori	r24, 0x01	; 1
    2210:	8c 93       	st	X, r24
			PORTB &= (~(1<<PB1));
    2212:	a8 e3       	ldi	r26, 0x38	; 56
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e8 e3       	ldi	r30, 0x38	; 56
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8d 7f       	andi	r24, 0xFD	; 253
    221e:	8c 93       	st	X, r24
    2220:	b7 cf       	rjmp	.-146    	; 0x2190 <main+0x138>

00002222 <Timer0_Fast_PWM>:

#include "Timer_and_Interrupt.h"
volatile uint8 flag = 0;

Timer0_Fast_PWM(uint16 number)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <Timer0_Fast_PWM+0x6>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);
    2230:	af e5       	ldi	r26, 0x5F	; 95
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	ef e5       	ldi	r30, 0x5F	; 95
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	80 68       	ori	r24, 0x80	; 128
    223c:	8c 93       	st	X, r24
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    223e:	e3 e5       	ldi	r30, 0x53	; 83
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	8a e6       	ldi	r24, 0x6A	; 106
    2244:	80 83       	st	Z, r24
	DDRB |= (1<<PB3);
    2246:	a7 e3       	ldi	r26, 0x37	; 55
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	e7 e3       	ldi	r30, 0x37	; 55
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	88 60       	ori	r24, 0x08	; 8
    2252:	8c 93       	st	X, r24
	OCR0 = number;
    2254:	ec e5       	ldi	r30, 0x5C	; 92
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	80 83       	st	Z, r24
	TCNT0 = 0;
    225c:	e2 e5       	ldi	r30, 0x52	; 82
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	10 82       	st	Z, r1
}
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <__vector_2>:

ISR(INT1_vect)
{
    226c:	1f 92       	push	r1
    226e:	0f 92       	push	r0
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	0f 92       	push	r0
    2274:	11 24       	eor	r1, r1
    2276:	8f 93       	push	r24
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	if (flag == 0)
    2280:	80 91 84 00 	lds	r24, 0x0084
    2284:	88 23       	and	r24, r24
    2286:	21 f4       	brne	.+8      	; 0x2290 <__vector_2+0x24>
	{
		flag = 1;
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	80 93 84 00 	sts	0x0084, r24
    228e:	06 c0       	rjmp	.+12     	; 0x229c <__vector_2+0x30>
	}
	else if (flag == 1 )
    2290:	80 91 84 00 	lds	r24, 0x0084
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	11 f4       	brne	.+4      	; 0x229c <__vector_2+0x30>
	{
		flag = 0;
    2298:	10 92 84 00 	sts	0x0084, r1
	}
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	8f 91       	pop	r24
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <INT1_Init>:

void INT1_Init(void)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	SREG &=~ (1<<7);
    22b4:	af e5       	ldi	r26, 0x5F	; 95
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	ef e5       	ldi	r30, 0x5F	; 95
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8f 77       	andi	r24, 0x7F	; 127
    22c0:	8c 93       	st	X, r24
	DDRD  &= (~(1<<PD3));
    22c2:	a1 e3       	ldi	r26, 0x31	; 49
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	e1 e3       	ldi	r30, 0x31	; 49
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	87 7f       	andi	r24, 0xF7	; 247
    22ce:	8c 93       	st	X, r24
	GICR = (1<<INT1);
    22d0:	eb e5       	ldi	r30, 0x5B	; 91
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 e8       	ldi	r24, 0x80	; 128
    22d6:	80 83       	st	Z, r24
	MCUCR = (1<<ISC10) | (1<<ISC11);
    22d8:	e5 e5       	ldi	r30, 0x55	; 85
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	8c e0       	ldi	r24, 0x0C	; 12
    22de:	80 83       	st	Z, r24
	SREG |= (1<<7);
    22e0:	af e5       	ldi	r26, 0x5F	; 95
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ef e5       	ldi	r30, 0x5F	; 95
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	80 68       	ori	r24, 0x80	; 128
    22ec:	8c 93       	st	X, r24

}
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <__prologue_saves__>:
    22f4:	2f 92       	push	r2
    22f6:	3f 92       	push	r3
    22f8:	4f 92       	push	r4
    22fa:	5f 92       	push	r5
    22fc:	6f 92       	push	r6
    22fe:	7f 92       	push	r7
    2300:	8f 92       	push	r8
    2302:	9f 92       	push	r9
    2304:	af 92       	push	r10
    2306:	bf 92       	push	r11
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	ca 1b       	sub	r28, r26
    231e:	db 0b       	sbc	r29, r27
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	09 94       	ijmp

0000232c <__epilogue_restores__>:
    232c:	2a 88       	ldd	r2, Y+18	; 0x12
    232e:	39 88       	ldd	r3, Y+17	; 0x11
    2330:	48 88       	ldd	r4, Y+16	; 0x10
    2332:	5f 84       	ldd	r5, Y+15	; 0x0f
    2334:	6e 84       	ldd	r6, Y+14	; 0x0e
    2336:	7d 84       	ldd	r7, Y+13	; 0x0d
    2338:	8c 84       	ldd	r8, Y+12	; 0x0c
    233a:	9b 84       	ldd	r9, Y+11	; 0x0b
    233c:	aa 84       	ldd	r10, Y+10	; 0x0a
    233e:	b9 84       	ldd	r11, Y+9	; 0x09
    2340:	c8 84       	ldd	r12, Y+8	; 0x08
    2342:	df 80       	ldd	r13, Y+7	; 0x07
    2344:	ee 80       	ldd	r14, Y+6	; 0x06
    2346:	fd 80       	ldd	r15, Y+5	; 0x05
    2348:	0c 81       	ldd	r16, Y+4	; 0x04
    234a:	1b 81       	ldd	r17, Y+3	; 0x03
    234c:	aa 81       	ldd	r26, Y+2	; 0x02
    234e:	b9 81       	ldd	r27, Y+1	; 0x01
    2350:	ce 0f       	add	r28, r30
    2352:	d1 1d       	adc	r29, r1
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	ed 01       	movw	r28, r26
    2360:	08 95       	ret

00002362 <itoa>:
    2362:	fb 01       	movw	r30, r22
    2364:	9f 01       	movw	r18, r30
    2366:	e8 94       	clt
    2368:	42 30       	cpi	r20, 0x02	; 2
    236a:	c4 f0       	brlt	.+48     	; 0x239c <itoa+0x3a>
    236c:	45 32       	cpi	r20, 0x25	; 37
    236e:	b4 f4       	brge	.+44     	; 0x239c <itoa+0x3a>
    2370:	4a 30       	cpi	r20, 0x0A	; 10
    2372:	29 f4       	brne	.+10     	; 0x237e <itoa+0x1c>
    2374:	97 fb       	bst	r25, 7
    2376:	1e f4       	brtc	.+6      	; 0x237e <itoa+0x1c>
    2378:	90 95       	com	r25
    237a:	81 95       	neg	r24
    237c:	9f 4f       	sbci	r25, 0xFF	; 255
    237e:	64 2f       	mov	r22, r20
    2380:	77 27       	eor	r23, r23
    2382:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__udivmodhi4>
    2386:	80 5d       	subi	r24, 0xD0	; 208
    2388:	8a 33       	cpi	r24, 0x3A	; 58
    238a:	0c f0       	brlt	.+2      	; 0x238e <itoa+0x2c>
    238c:	89 5d       	subi	r24, 0xD9	; 217
    238e:	81 93       	st	Z+, r24
    2390:	cb 01       	movw	r24, r22
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	a1 f7       	brne	.-24     	; 0x237e <itoa+0x1c>
    2396:	16 f4       	brtc	.+4      	; 0x239c <itoa+0x3a>
    2398:	5d e2       	ldi	r21, 0x2D	; 45
    239a:	51 93       	st	Z+, r21
    239c:	10 82       	st	Z, r1
    239e:	c9 01       	movw	r24, r18
    23a0:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <strrev>

000023a4 <strrev>:
    23a4:	dc 01       	movw	r26, r24
    23a6:	fc 01       	movw	r30, r24
    23a8:	67 2f       	mov	r22, r23
    23aa:	71 91       	ld	r23, Z+
    23ac:	77 23       	and	r23, r23
    23ae:	e1 f7       	brne	.-8      	; 0x23a8 <strrev+0x4>
    23b0:	32 97       	sbiw	r30, 0x02	; 2
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <strrev+0x18>
    23b4:	7c 91       	ld	r23, X
    23b6:	6d 93       	st	X+, r22
    23b8:	70 83       	st	Z, r23
    23ba:	62 91       	ld	r22, -Z
    23bc:	ae 17       	cp	r26, r30
    23be:	bf 07       	cpc	r27, r31
    23c0:	c8 f3       	brcs	.-14     	; 0x23b4 <strrev+0x10>
    23c2:	08 95       	ret

000023c4 <__udivmodhi4>:
    23c4:	aa 1b       	sub	r26, r26
    23c6:	bb 1b       	sub	r27, r27
    23c8:	51 e1       	ldi	r21, 0x11	; 17
    23ca:	07 c0       	rjmp	.+14     	; 0x23da <__udivmodhi4_ep>

000023cc <__udivmodhi4_loop>:
    23cc:	aa 1f       	adc	r26, r26
    23ce:	bb 1f       	adc	r27, r27
    23d0:	a6 17       	cp	r26, r22
    23d2:	b7 07       	cpc	r27, r23
    23d4:	10 f0       	brcs	.+4      	; 0x23da <__udivmodhi4_ep>
    23d6:	a6 1b       	sub	r26, r22
    23d8:	b7 0b       	sbc	r27, r23

000023da <__udivmodhi4_ep>:
    23da:	88 1f       	adc	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	5a 95       	dec	r21
    23e0:	a9 f7       	brne	.-22     	; 0x23cc <__udivmodhi4_loop>
    23e2:	80 95       	com	r24
    23e4:	90 95       	com	r25
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	08 95       	ret

000023ec <_exit>:
    23ec:	f8 94       	cli

000023ee <__stop_program>:
    23ee:	ff cf       	rjmp	.-2      	; 0x23ee <__stop_program>
